/**********************************************************************
 This program is used to test the parser: GSMBMParser
**********************************************************************/



// import classes
import java.nio.file.Files;
import java.nio.file.Paths;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;
import java.util.Random;
import java.util.Scanner;


// Class declaration
public class test extends Thread 
{
	int count;
	private static Scanner reader;
	private static int a, b;
	private static test[] myThreads;
	
	// constructor
	test(int count) 
	{
	this.count = count;
	}
	
	// declare run class
	public void run() 
	{
		try 
			{
			System.out.println(Thread.currentThread().getName());
			
			// the sql server driver string
			Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
			
			
			// get the sql server database connection
			Connection connection = null;
			connection = DriverManager.getConnection("jdbc:sqlserver://10.50.108.142:49400;user=btwsts;password=bt3sts;database=BB_INTERFACE");
			Statement sta = connection.createStatement();
		
			String regex = "####";
			String filePath = "C:/Users/611341172/Desktop/Java database utility/queries/GlobalServices/gs_order_mbm.txt";
			String FileData = null;
			List <String > listNumber = new ArrayList<String>();
			for (int i = 0; i < b; i++) 
			{
				String substr = "NFT" + Integer.valueOf(randomNumbergenerator(000000001 , 999999999));
				System.out.println(substr);
				listNumber.add(substr);
				FileData = new String(Files.readAllBytes(Paths.get(filePath)));
				FileData = FileData.replaceAll(regex, substr);
				//System.out.println("Replace Data: " + FileData);
				System.out.println("Values replaced successfully in New File!!");

				// run the query to insert the file
				double startTime = System.currentTimeMillis();
				int rs = sta.executeUpdate(FileData);
				double endTime = System.currentTimeMillis();
				System.out.println(Thread.currentThread().getName() + " # "	+ rs);
				
				
				System.out.println(Thread.currentThread().getName()	+ " is now Sleeping");
				Thread.sleep(1000);

				double totalTime = (endTime - startTime) / 1000.00;
				System.out.println(Thread.currentThread().getName() + "   "	+ totalTime + "   Time difference");
				
			}
			System.out.println(listNumber.toString());
			
			connection.close();
		} catch (Exception e) 
		{
			System.out.println("Exception Occured : " + e.getMessage());
		}
		

	}
        public static int randomNumbergenerator(int min, int max) 
        {
			if (min >= max) 
			{
			throw new IllegalArgumentException("max must be greater than min");
			}
        
		Random r = new Random();
		return r.nextInt((max - min) + 1) + min;
        }

        
        
        // main class declaration
	public static void main(String[] args) 
	{
		reader = new Scanner(System.in);
		System.out.println("Enter the no of users");
		a = reader.nextInt();
				
		System.out.println("Enter the no of iterations");
		b = reader.nextInt();

		myThreads = new test[a]; // Same size as our int array
			
		for (int i = 0; i < a; i++)		
			{
			    myThreads[i] = new test(10);
			    myThreads[i].start(); // Spins up a new thread and runs your code
			}
			
	}
}
